{
  "preProcess": [
  ],
  "executeModules": [
    {
      "moduleName": "connections",
      "innerClass": "Connection",
      "instances": [
        {
          "name": "MSSQLServer",
          "code": "MSSQLServer",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "schema": "DWMS",
              "password": "YWJjMTIz",
              "driver": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
              "user": "sa",
              "url": "jdbc:sqlserver://localhost;DatabaseName=DWMS"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "DBConnection"
          }
        },
        {
          "name": "MySQLServer",
          "code": "MySQLServer",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "schema": "ct-app-center",
              "password": "Y29udHJvbDEyMyE=",
              "driver": "com.mysql.jdbc.Driver",
              "user": "root",
              "url": "jdbc:mysql://localhost:3306/ct-app-center"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "DBConnection"
          }
        },
        {
          "name": "SQL",
          "code": "SQL",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "password": "Y29udHJvbDEyMyE=",
              "dialect": "org.hibernate.dialect.MySQLDialect",
              "driver": "com.mysql.jdbc.Driver",
              "url": "jdbc:mysql://localhost:3306/riot_main",
              "username": "root",
              "hazelcastNativeClientAddress": "localhost"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "SQL"
          }
        },
        {
          "name": "Services",
          "code": "SERVICES",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "host": "localhost",
              "apikey": "7B4BCCDC",
              "secure": false,
              "port": 8080,
              "contextpath": "/riot-core-services"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "REST"
          }
        },
        {
          "name": "Mqtt",
          "code": "MQTT",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "host": "localhost",
              "qos": 2,
              "secure": false,
              "port": 1883
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "MQTT"
          }
        },
        {
          "name": "MongoDB",
          "code": "MONGO",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "mongoReplicaSet": "",
              "mongoSSL": false,
              "mongoPrimary": "localhost:27017",
              "password": "Y29udHJvbDEyMyE=",
              "mongoAuthDB": "admin",
              "mongoSecondary": "",
              "mongoConnectTimeout": 0,
              "mongoSharding": false,
              "mongoDB": "riot_main",
              "mongoMaxPoolSize": 0,
              "username": "admin"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "MONGO"
          }
        },
        {
          "name": "Google Cloud API",
          "code": "GPubSub",
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          },
          "properties": {
            "innerMethod": "toString",
            "params": {
              "type": "service_account",
              "project_id": "YOURPROJECT-123456",
              "private_key_id": "594f55525f505249564154455f4b4559",
              "private_key": "-----BEGIN PRIVATE KEY-----\nPASTE_YOUR_PRIVATE_KEY_HERE\n-----END PRIVATE KEY-----\n",
              "client_email": "your_client@email.com",
              "client_id": "0123456789",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://accounts.google.com/o/oauth2/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/YOUR_CLIENT_CERT_URL"
            }
          },
          "connectionType": {
            "innerClass": "ConnectionType",
            "getter": "getConnectionTypeByCode",
            "params": "GPubSub"
          }
        }
      ]
    },
    {
      "moduleName": "bridges",
      "innerClass": "Edgebox",
      "instances": [
        {
          "name": "Core Bridge",
          "code": "MCB",
          "type": "core",
          "port": 0,
          "parameterType": "BRIDGE_TYPE",
          "configuration": {
            "innerMethod": "toString",
            "params": {
              "shiftZoneRule": {
                "active": false,
                "shiftProperty": "shift",
                "zoneViolationStatusProperty": "zoneViolationStatus",
                "zoneViolationFlagProperty": "zoneViolationFlag"
              },
              "mongo": {
                "connectionCode": "MONGO"
              },
              "coreBridgeStatistics": {"active": true},
              "cepChangeLogs": {"active": false},
              "numberOfThreads": 2,
              "mqtt": {
                "connectionCode": "MQTT",
                "topics": [
                  "/v1/data/APP2/#",
                  "/v1/data/ALEB/#"
                ]
              },
              "swarmRule": {
                "thingTypes": [{
                  "thingTypeCode": "default_rfid_thingtype",
                  "udfGroup": "grouping",
                  "distanceFilter": 10000,
                  "udfGroupStatus": "groupStatus"
                }],
                "timeInterval": 5000,
                "active": false,
                "algorithm": "followLastDetect"
              },
              "thingCache": {
                "size": 1000000,
                "evictionTime": 60
              },
              "bridgeStartupOptions": {
                "servicesConnectionCode": "SERVICES",
                "sqlConnectionCode": "SQL",
                "jvmHeapMemory": {
                  "Xms": "512m",
                  "Xmx": "1024m"
                }
              },
              "bridgeAgent": {
                "agentCode": ""
              },
              "outOfOrderRule": {
                "active": false
              },
              "thingInsertRestApi": {
                "retryAttemptLimit": 10,
                "retryIntervalPeriodSecs": 5000
              }
            }
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "mojix"
          }
        },
        {
          "name": "ALE Edge Bridge",
          "code": "ALEB",
          "type": "edge",
          "port": 9090,
          "parameterType": "BRIDGE_TYPE",
          "configuration": {
            "innerMethod": "toString",
            "params": {
              "zoneDwellFilter": {
                "lastDetectTimeActive": true,
                "active": true,
                "zoneDwellTime": 300,
                "inZoneDistance": 10,
                "lastDetectTimeWindow": 0,
                "unlockDistance": 25,
                "evictionTime":24
              },
              "facilityMapForOrigin": "Map Store Santa Monica",
              "edgeBridgeStatistics": {"active": true},
              "thingTypeCode": "default_rfid_thingtype",
              "storeAleMessages": {"active": false},
              "numberOfThreads": 2,
              "httpListener": {
                "bridgePort": 9090,
                "socketTimeout": 60000
              },
              "mqtt": {
                "connectionCode": "MQTT"
              },
              "kafka": {
                "active": false,
                "connectionCode": "KAFKA"
              },
              "bridgeStartupOptions": {
                "servicesConnectionCode": "SERVICES",
                "jvmHeapMemory": {
                  "Xms": "512m",
                  "Xmx": "1024m"
                }
              },
              "bridgeAgent": {
                "agentCode": ""
              },
              "coreBridge":""
            }
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "SM"
          }
        }
      ]
    },
    {
      "moduleName": "edgeboxRules",
      "innerClass": "EdgeboxRule",
      "instances": [
        {
          "name": "Door_#1_Light_Buzzer",
          "input": "ThingMessage",
          "output": "AlienReaderGPIOSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "ip": "10.100.1.61",
              "port": 23,
              "username": "alien",
              "password": "password",
              "times": {
                "lightOn": 5000,
                "buzzerOn": 4000,
                "buzzerOff": 3000,
                "numberOfRetries": 5,
                "retryTime": 5000,
                "delay": 2000
              },
              "lightPinMap": {
                "light1": 0,
                "light2": 2,
                "light3": 3,
                "light4": 4
              },
              "buzzerPinMap": {
                "buzzer1": 1
              },
              "zoneLightBuzzerMap": {
                "Stockroom": [
                  "light1",
                  "buzzer1"
                ],
                "Salesfloor": [
                  "light2",
                  "buzzer1"
                ],
                "PoS": [
                  "light3",
                  "buzzer1"
                ],
                "Entrance": [
                  "light4",
                  "buzzer1"
                ]
              }
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('logicalReader') = \"Door1\" and udf('status') != \"Sold\"  )",
          "description": "Light Buzzer Example",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 0,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Door_#2_Light_Buzzer",
          "input": "ThingMessage",
          "output": "AlienReaderGPIOSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "ip": "10.100.1.61",
              "port": 23,
              "username": "alien",
              "password": "password",
              "times": {
                "lightOn": 5000,
                "buzzerOn": 4000,
                "buzzerOff": 3000,
                "numberOfRetries": 5,
                "retryTime": 5000,
                "delay": 2000
              },
              "lightPinMap": {
                "light1": 0,
                "light2": 2,
                "light3": 3,
                "light4": 4
              },
              "buzzerPinMap": {
                "buzzer1": 1
              },
              "zoneLightBuzzerMap": {
                "Stockroom": [
                  "light1",
                  "buzzer1"
                ],
                "Salesfloor": [
                  "light2",
                  "buzzer1"
                ],
                "PoS": [
                  "light3",
                  "buzzer1"
                ],
                "Entrance": [
                  "light4",
                  "buzzer1"
                ]
              }
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('logicalReader') = \"Door2\" and udf('status') != \"Sold\" )",
          "description": "Light Buzzer Example",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 1,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Door_#1_Light_BuzzerMFR",
          "input": "ThingMessage",
          "output": "MFRReaderGPIOSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "ip": "10.100.1.124",
              "port": 65200,
              "times": {
                "lightOn": 5000,
                "buzzerOn": 3000,
                "buzzerOff": 2000,
                "delayBeforeTrigger": 0,
                "timeBuzzer": 3000,
                "maxTimeBuzzer": 5000
              },
              "lightPinMap": {
                "light1": 0,
                "light2": 2,
                "light3": 3,
                "light4": 4
              },
              "buzzerPinMap": {
                "buzzer1": 1
              },
              "zoneLightBuzzerMap": {
                "Stockroom": [
                  "light1",
                  "buzzer1"
                ],
                "Salesfloor": [
                  "light2",
                  "buzzer1"
                ],
                "PoS": [
                  "light3",
                  "buzzer1"
                ],
                "Entrance": [
                  "light4",
                  "buzzer1"
                ]
              }
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('zone') = \"Stockroom\" )",
          "description": "Example MFR Subscriber",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 2,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "TurnOff_Light_BuzzerMFR",
          "input": "ThingMessage",
          "output": "MFRTurnOffGPIOSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "ip": "10.100.1.124",
              "port": 65200,
              "times": {
                "lightOn": 5000,
                "buzzerOn": 3000,
                "buzzerOff": 2000,
                "delayBeforeTrigger": 0,
                "timeBuzzer": 3000,
                "maxTimeBuzzer": 5000
              },
              "lightPinMap": {
                "light1": 0,
                "light2": 2,
                "light3": 3,
                "light4": 4
              },
              "buzzerPinMap": {
                "buzzer1": 1
              },
              "zoneLightBuzzerMap": {
                "Stockroom": [
                  "light1",
                  "buzzer1"
                ],
                "Salesfloor": [
                  "light2",
                  "buzzer1"
                ],
                "PoS": [
                  "light3",
                  "buzzer1"
                ],
                "Entrance": [
                  "light4",
                  "buzzer1"
                ]
              },
              "counterUDFs": {
                "zoneUDF": "zone",
                "lastZoneIdUDF": "lastZoneId",
                "zoneAlertFlagUDF": "zoneAlertFlag"
              }
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('zone') != \"Stockroom\" )",
          "description": "Example TurnOff light buzzer MFR Subscriber",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 3,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Location_Event_Test",
          "input": "ThingMessage",
          "output": "ThingPropertySetter",
          "outputConfig": "status=\"BAD\"",
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('logicalReader') != 'LR1' )",
          "description": "Sets status to 'BAD' if a thing is not in it's assigned zone",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 4,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Door_Event_Test",
          "input": "ThingMessage",
          "output": "ThingPropertySetter",
          "outputConfig": "status=\"YOU ARE IN\"",
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('doorEvent') = 'LR1:in' )",
          "description": "Test rule for junit testing",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 5,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Point_In_Zone_Test",
          "input": "ThingMessage",
          "output": "ThingPropertySetter",
          "outputConfig": "status=\"YOU ARE IN POS\"",
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('zone') = 'PoS' )",
          "description": "Test rule for junit testing",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 6,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Out_Of_Assigned_Zone",
          "input": "ThingMessage",
          "output": "ThingPropertySetter",
          "outputConfig": "status='bad'",
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('zone') != 'assignedZone' )",
          "description": "Sets status to 'bad' if a thing is not in it's assigned zone",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 7,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "MQTTPushSubscriber",
          "input": "ThingMessage",
          "output": "MQTTPushSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "host": "localhost",
              "port": 1883,
              "topic": "MQTTDemo",
              "mqtt-body": "Serial Number: ${serialNumber}. Hi. This is the mqtt message for thing ${name}"
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('zone') = 'Stockroom' )",
          "description": "When a thing is moved to another area, this rule sends information from the thing to the broker configured.",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 8,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "EmailSubscriber",
          "input": "ThingMessage",
          "output": "EmailSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "mqtt": {
                "connectionCode": "MQTT"
              },
              "contentType": "text/html; charset=utf-8",
              "subject": "Subject Serial: ${serialNumber}",
              "to": [
                "administrator@mojix.com"
              ],
              "email-body": "Hi. This is an automated message from Vizix from thing: ${name}."
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('zone') = 'Stockroom' )",
          "description": "When a thing is moved to another area, this rule sends an email to recipients configured.",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 9,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Exit_Gate_Rule",
          "input": "ThingMessage",
          "output": "ReportGeneratorSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {}
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  udf('zone') = 'Stockroom' )",
          "description": "Valid values of groupBy are:- id or thingId (child/current thing_id)- parentId (parent child_id)- <any valid udf> (example: zone) records in table exit_report are snapshots of the thing, but this table only keeps last record",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 10,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Example_Rest_Endpoint_Subscriber",
          "input": "ThingMessage",
          "output": "com.tierconnect.riot.bridges.rules.actions.RestEndpointSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "method": "POST",
              "protocol": "http",
              "host": "localhost",
              "port": 8080,
              "path": "/riot-core-services/api/thingBridge/test/testRestEndpointSubscriber",
              "headers": {
                "Api_key": "root"
              },
              "basicAuth": {
                "username": "myname",
                "password": "mypasss"
              },
              "body": "zone=$zone"
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( )",
          "description": "Example Rest Endpoint Subscriber",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 11,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "Example_Super_Subscriber",
          "input": "ThingMessage",
          "output": "com.tierconnect.riot.bridges.rules.actions.SuperSubscriber",
          "outputConfig": {
            "innerMethod": "jsonToString",
            "params": {
              "jsonObject": [
                {
                  "name": "com.tierconnect.riot.bridges.rules.actions.ThingPropertySetterSubcriber",
                  "active": true,
                  "config": "status=$zone"
                },
                {
                  "name": "com.tierconnect.riot.bridges.rules.actions.AlienReaderGPIOSubscriber3",
                  "active": true,
                  "config": {
                    "ip": "10.100.1.61",
                    "port": 23,
                    "username": "alien",
                    "password": "password",
                    "times": {
                      "lightOn": 5000,
                      "buzzerOn": 4000,
                      "buzzerOff": 3000
                    },
                    "lightPinMap": {
                      "light1": 0,
                      "light2": 2,
                      "light3": 3,
                      "light4": 4
                    },
                    "buzzerPinMap": {
                      "buzzer1": 1
                    },
                    "zoneLightBuzzerMap": {
                      "Stockroom": [
                        "light1",
                        "buzzer1"
                      ],
                      "Salesfloor": [
                        "light2",
                        "buzzer1"
                      ],
                      "PoS": [
                        "light3",
                        "buzzer1"
                      ],
                      "Entrance": [
                        "light4",
                        "buzzer1"
                      ]
                    }
                  }
                },
                {
                  "name": "com.tierconnect.riot.bridges.rules.actions.RestEndpointSubscriber",
                  "active": true,
                  "config": {
                    "method": "POST",
                    "protocol": "http",
                    "host": "localhost",
                    "port": 8080,
                    "path": "/riot-core-services/api/thingBridge/test/testRestEndpointSubscriber",
                    "headers": {
                      "Api_key": "root"
                    },
                    "basicAuth": {
                      "username": "myname",
                      "password": "mypasss"
                    },
                    "body": "zone=$serialNumber"
                  }
                },
                {
                  "name": "com.tierconnect.riot.bridges.rules.actions.MQTTPushSubscriber",
                  "active": true,
                  "config": {
                    "host": "localhost",
                    "port": 1883,
                    "topic": "MQTTDemo",
                    "mqtt-body": "Serial Number: ${serialNumber}. Hi. This is the mqtt message for thing ${name}"
                  }
                }
              ]
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and (  )",
          "description": "Example Super Subscriber. This allows more than one subscriber to be executed per Esper rule.",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 12,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "ExternalDataBaseSubscriber",
          "input": "ThingMessage",
          "output": "ExternalDataBaseSubscriber",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "connectionCode": "MSSQLServer",
              "storeProcedure": "VizixDocument",
              "input": [
                "documentId",
                "documentName",
                "documentType",
                "documentStatus",
                "category1",
                "category2",
                "boxId",
                "imagePath",
                "shelfId",
                "applySecurity",
                "cabinetId",
                "vizixFlag"
              ],
              "inputTypeData": [
                "Integer",
                "String",
                "String",
                "String",
                "String",
                "String",
                "Integer",
                "String",
                "Integer",
                "Integer",
                "Integer",
                "String"
              ]
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'Document' and (  udf('vizixFlag') = \"Vizix\" )",
          "description": "When a thing is moved to another area, this rule sends the value of the UDF to the external Data Base in SQL Server.",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 13,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        },
        {
          "name": "TCP Flow (Sync)",
          "input": "ThingMessage",
          "output": "TCPAction",
          "outputConfig": {
            "innerMethod": "toString",
            "params": {
              "host": "localhost",
              "port": 23,
              "payLoad": "Test",
              "typeMessage": "plainText",
              "encoding": "text"
            }
          },
          "rule": "select * from messageEventType where udf('thingTypeCode') = 'default_rfid_thingtype' and ( udf('zone') != \"Stockroom\" )",
          "description": "Send payload to a TCP server",
          "active": false,
          "runOnReorder": false,
          "serialExecution": false,
          "sortOrder": 14,
          "conditionType": "CEP",
          "parameterConditionType": "CONDITION_TYPE",
          "edgebox": {
            "innerClass": "Edgebox",
            "getter": "selectByCode",
            "params": "MCB"
          },
          "group": {
            "innerClass": "Group",
            "getter": "getByCode",
            "params": "root"
          }
        }
      ]
    }
  ],
  "postProcess": [
  ]
}
