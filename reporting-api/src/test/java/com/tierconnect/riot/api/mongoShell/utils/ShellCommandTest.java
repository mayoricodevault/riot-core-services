package com.tierconnect.riot.api.mongoShell.utils;

import org.junit.*;

import org.junit.runners.MethodSorters;

import java.io.IOException;

import static org.hamcrest.core.StringContains.containsString;
import static org.junit.Assert.*;

/**
 * Created by achambi on 10/18/16.
 * Shell command test
 * ViZix Project
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ShellCommandTest {

    @Before
    public void setUp() throws Exception {

    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    @Ignore
    public void case1TestExecuteCommandNull() throws Exception {
        try {
            (new ShellCommand()).executeCommand(null);
            fail("expected exception:  NullPointerException");
        } catch (NullPointerException ex) {
            assertEquals("The command to run is null or one of the elements of command is null", ex.getMessage());
        }
    }

    @Test
    @Ignore
    public void case2testExecuteCommandSyntaxError() throws Exception {
        try {
            (new ShellCommand()).executeCommand("echos This is a message to Test shell command error.");
            fail("expected exception:  IOException");
        } catch (IOException ex) {
            assertEquals("java.io.IOException: An error occurred Input/Output.java.io.IOException: The function " +
                    "has " +
                    "syntax error.:\n" +
                    "sh: echos: command not found", ex.toString().trim());
        }
    }

    @Test
    public void case3testExecuteCommandMongoErrorBlank() throws Exception {
        String mongoCommand = "echo 'db.test.find({}).map(function(x){return x._id;});' | mongo test_dataBase " +
                "--quiet" +
                " --authenticationDatabase admin " +
                "--host localhost:27017 -u admin -p control123!";
        String result = (new ShellCommand()).executeCommand(mongoCommand);
        assertEquals("[ ]", result);
    }

    @Test
    public void case4testExecuteCommandMaxSizeString() throws Exception {
        String mongoCommand = "echo 'print" + "" +
                "(\"1234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678\")' | mongo test_dataBase --quiet --authenticationDatabase admin --host localhost:27017 -u admin -p control123!";
        System.out.println(mongoCommand.length());
        String result = (new ShellCommand()).executeCommand(mongoCommand);
        System.out.println(result);
        mongoCommand = "echo 'print" + "" +
                "(\"7812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345" +
                "1234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345" +
                "1234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345" +
                "12345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451" +
                "234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123" +
                "4567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456" +
                "7812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781" +
                "23456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345" +
                "67890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789" +
                "01234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123" +
                "45123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512" +
                "34567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456" +
                "\7890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789" +
                "0123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345" +
                "12345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567" +
                "890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345" +
                "12345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812" +
                "3456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901" +
                "2345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345" +
                "6789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234" +
                "5123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678" +
                "901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234" +
                "5678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678" +
                "9012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345" +
                "67890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123" +
                "45678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234567890123451234567890123451" +
                "23456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456" +
                "78901234512345678901234512345678901234512345678123456789012345123456789012345123456789012345123456781234567890123451234" +
                "567890123451234567890123451234567812345678901234512345678901234512345678901234512345678123456789012345123456789012345123" +
                "456789012345123456781234567890123451234567890123451234567890123451234567812345678901234512345678901234512345678901234512" +
                "345678123451234567890123451234567890123451234567812345678901234512312312345123123123451231231234512312378123456789012345" +
                "123123123451231231234512312312345123123781234567890123451231231234512312312345123123123451231231231234512312312345123123" +
                "31234512312312312345123123123451231237812781234567890123451231231234512312312345123123123451231231231234512312312345123123" +
                "3123451231231231234512312312345123123781281234567890123451231231234512312312345123123123451231231231234512312312345123123" +
                "31234512312312312345123123123451231237812128123456789012345123123123451231231234512312312345123123123123451231231234512312345" +
                "6789012345123123123451231231234512312312345123231234512312312312345123123123451231212345121\")'" +
                " | mongo test_dataBase --quiet --authenticationDatabase" +
                " admin --host localhost:27017 -u admin -p control123!";
        System.out.println(mongoCommand.length());
        result = (new ShellCommand()).executeCommand(mongoCommand);
        System.out.println(result);
    }

    @Test
    public void case5testExecuteCommand() throws Exception {
        String expected = "This is a message to Test shell command.";
        String result = (new ShellCommand()).executeCommand("echo This is a message to Test shell command.");
        assertEquals(expected, result.trim());
    }

    @Test
    public void case6testExecuteCommandFail() throws Exception {
        try {
            (new ShellCommand()).executeCommand("echos This is a message to Test shell command.");
        } catch (IOException ex) {
            assertThat(ex.getMessage(), containsString("An error occurred Input/Output.java.io.IOException: The " +
                    "function has syntax error.:"));
        }
    }

    @Test
    public void case7testExecuteCommandFail2() throws Exception {
        try {
            (new ShellCommand()).executeCommand("echo 'This is a message to Test shell command.Error'");
        } catch (IOException ex) {
            assertThat(ex.getMessage(), containsString("An error occurred Input/Output.java.io.IOException: The " +
                    "command returned error and can not be executed.:This is a message to Test shell command.Error"));
        }
    }

    @Test
    @Ignore
    public void case8testExecuteCommandFail3() throws Exception {
        SecurityManager sm = new SecurityManager();
        try {
            System.setSecurityManager(sm);
            (new ShellCommand()).executeCommand("echo 'This is a message to Test shell command.Error'");
        } catch (SecurityException ex) {
            assertThat(ex.getMessage(),
                    containsString("The Security Manager doesn't allow creation of the subprocess."));
        }
    }
}